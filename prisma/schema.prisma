// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  progress      Progress[]
  challenges    ChallengeResult[]
  skills        Skill[]
  activities    Activity[]
  // Community fields
  bio           String?
  githubUrl     String?
  linkedinUrl   String?
  isMentor      Boolean        @default(false)
  mentorTopics  String[]
  learningPaths LearningPath[]
  discussions   Discussion[]
  projects      Project[]
  menteeRequests MentorshipRequest[] @relation("MenteeRequests")
  mentorRequests MentorshipRequest[] @relation("MentorRequests")
  // Challenge related fields
  submissions   Submission[]
  userBadges    UserBadge[]
  userProgress  UserProgress?
  leaderboard   LeaderboardEntry[]
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Roadmap {
  id          String     @id @default(cuid())
  title       String
  description String
  topics      Topic[]
  progress    Progress[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Topic {
  id          String     @id @default(cuid())
  title       String
  description String
  content     String     @db.Text
  roadmapId   String
  roadmap     Roadmap    @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  progress    Progress[]
  order       Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([roadmapId])
}

model Progress {
  id        String   @id @default(cuid())
  userId    String
  roadmapId String
  topicId   String
  status    String   @default("not_started")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  roadmap   Roadmap  @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, roadmapId, topicId])
  @@index([userId])
  @@index([roadmapId])
  @@index([topicId])
}

model ChallengeResult {
  id        String   @id @default(cuid())
  userId    String
  challenge String
  passed    Boolean
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Skill {
  id        String   @id @default(cuid())
  userId    String
  name      String
  level     Int      @default(0)
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Activity {
  id        String   @id @default(cuid())
  userId    String
  type      String
  detail    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Settings {
  id               String   @id @default(cuid())
  darkMode         Boolean  @default(false)
  emailNotification Boolean  @default(true)
  analyticsEnabled  Boolean  @default(true)
  updatedAt         DateTime @updatedAt
}

// Community Models
model LearningPath {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  technologies String[]
  progress    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Discussion {
  id        String   @id @default(cuid())
  userId    String
  title     String
  content   String   @db.Text
  tags      String[]
  likes     Int      @default(0)
  replies   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Project {
  id           String   @id @default(cuid())
  userId       String
  title        String
  description  String
  technologies String[]
  githubUrl    String?
  liveUrl      String?
  imageUrl     String?
  likes        Int      @default(0)
  comments     Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model MentorshipRequest {
  id          String   @id @default(cuid())
  menteeId    String
  mentorId    String?
  topic       String
  description String
  status      String   @default("open")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  mentee      User     @relation("MenteeRequests", fields: [menteeId], references: [id], onDelete: Cascade)
  mentor      User?    @relation("MentorRequests", fields: [mentorId], references: [id])

  @@index([menteeId])
  @@index([mentorId])
}

// Challenge Models
model Challenge {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  difficulty  String
  points      Int
  timeLimit   Int      // in minutes
  template    String   @db.Text
  solution    String   @db.Text
  testCases   Json[]   // Array of test cases
  hints       String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  submissions Submission[]
}

model Submission {
  id            String   @id @default(cuid())
  userId        String
  challengeId   String
  code          String   @db.Text
  status        String   // pending, running, passed, failed
  results       Json     // Array of test results
  points        Int
  executionTime Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge     Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([challengeId])
}

model Badge {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  criteria    Json     // Conditions to unlock the badge
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userBadges  UserBadge[]
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String
  unlockedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@index([userId])
  @@index([badgeId])
}

model UserProgress {
  id                String   @id @default(cuid())
  userId            String   @unique
  totalPoints       Int      @default(0)
  completedChallenges Int    @default(0)
  currentStreak     Int      @default(0)
  longestStreak     Int      @default(0)
  lastActive        DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LeaderboardEntry {
  id        String   @id @default(cuid())
  userId    String
  points    Int
  rank      Int
  category  String   // global, monthly, weekly
  period    String?  // YYYY-MM for monthly, YYYY-WW for weekly
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category, period])
  @@index([userId])
  @@index([category, period])
}
